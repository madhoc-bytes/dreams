============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 343 items

http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action ERROR [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format ERROR [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable ERROR [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel ERROR [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm ERROR [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all ERROR [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_handle_reusable SKIPPED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user ERROR [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner ERROR [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner ERROR [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token ERROR [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change ERROR [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent ERROR [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions ERROR [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user ERROR [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission ERROR [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token ERROR [  4%]
http_tests/auth_tests/test_auth_login.py::test_successful_login ERROR    [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions ERROR [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password ERROR [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout ERROR  [  6%]
http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout ERROR [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-@gmail.com] PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---@gmail.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---bob] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---bob@bob@bob.com] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-@gmail.com] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob@bob@bob.com] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--@gmail.com] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob@bob@bob.com] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-@gmail.com] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-bob] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-bob@bob@bob.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---@gmail.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---bob] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---bob@bob@bob.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-@gmail.com] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob@bob@bob.com] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--@gmail.com] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob@bob@bob.com] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration ERROR [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[Bob-Smith-bobsmith] FAILED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_duplicate FAILED [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct ERROR [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere ERROR [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_email_sent SKIPPED [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_password PASSED [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_reset_code PASSED [ 16%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_can_addowner SKIPPED [ 16%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member ERROR [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_non_member SKIPPED [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner ERROR [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner ERROR [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner ERROR [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id SKIPPED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id ERROR [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token ERROR [ 19%]
http_tests/channel_tests/test_channel_details.py::test_member_successful ERROR [ 19%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful ERROR [ 19%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id ERROR [ 20%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token ERROR [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite SKIPPED [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner ERROR [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member ERROR [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member ERROR [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid ERROR [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid ERROR [ 22%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token ERROR [ 22%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public ERROR [ 22%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private ERROR [ 23%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public ERROR [ 23%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel SKIPPED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id ERROR [ 23%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token ERROR [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully ERROR [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member ERROR [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id ERROR [ 25%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token ERROR [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent ERROR [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent ERROR [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected ERROR [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected ERROR [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num ERROR [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member ERROR [ 27%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid ERROR [ 27%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given ERROR [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner ERROR [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner ERROR [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner ERROR [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner ERROR [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner ERROR [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner ERROR [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id SKIPPED [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id ERROR [ 30%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token ERROR [ 30%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] ERROR [ 30%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] ERROR [ 30%]
http_tests/channels_tests/test_channels_create.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] ERROR [ 31%]
http_tests/channels_tests/test_channels_create.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] ERROR [ 31%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token ERROR [ 31%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels ERROR [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] ERROR [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] ERROR [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] ERROR [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] ERROR [ 33%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] ERROR [ 33%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] ERROR [ 33%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel ERROR [ 34%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token ERROR [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels ERROR [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private ERROR [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public ERROR [ 35%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist ERROR [ 35%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token ERROR [ 35%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation ERROR [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single ERROR [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple ERROR [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_user ERROR     [ 37%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token ERROR          [ 37%]
http_tests/dm_tests/test_dm_details.py::test_member_successful ERROR     [ 37%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful ERROR [ 37%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id ERROR         [ 38%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token ERROR         [ 38%]
http_tests/dm_tests/test_dm_invite.py::test_duplicate_dm_invite SKIPPED  [ 38%]
http_tests/dm_tests/test_dm_invite.py::test_invite_global_member ERROR   [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member ERROR [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_dm_id_invalid ERROR          [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_u_id_invalid ERROR           [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_invalidated_token ERROR      [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully ERROR [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member ERROR [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id ERROR           [ 41%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token ERROR           [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms ERROR           [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm ERROR           [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms ERROR     [ 42%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm ERROR      [ 42%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token ERROR        [ 42%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent ERROR [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent ERROR [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected ERROR [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected ERROR [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num ERROR [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member ERROR [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid ERROR [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given ERROR [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal ERROR  [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages ERROR [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm ERROR [ 46%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id ERROR          [ 46%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token ERROR          [ 46%]
http_tests/echo_tests/echo_test.py::test_echo PASSED                     [ 46%]
http_tests/echo_tests/echo_test.py::test_echo_except PASSED              [ 47%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message ERROR [ 47%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message ERROR [ 47%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message ERROR [ 48%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message ERROR [ 48%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length ERROR [ 48%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message ERROR [ 48%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit ERROR [ 49%]
http_tests/message_tests/test_message_edit.py::test_invalid_token ERROR  [ 49%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique ERROR [ 49%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel ERROR [ 50%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm ERROR [ 50%]
http_tests/message_tests/test_message_pin.py::test_invalid_message_id ERROR [ 50%]
http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice ERROR [ 51%]
http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin ERROR [ 51%]
http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin ERROR [ 51%]
http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin ERROR [ 51%]
http_tests/message_tests/test_message_pin.py::test_invalid_token ERROR   [ 52%]
http_tests/message_tests/test_message_react.py::test_successful_react_in_channel ERROR [ 52%]
http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message ERROR [ 52%]
http_tests/message_tests/test_message_react.py::test_invalid_message_id ERROR [ 53%]
http_tests/message_tests/test_message_react.py::test_invalid_react_id ERROR [ 53%]
http_tests/message_tests/test_message_react.py::test_cant_react_twice ERROR [ 53%]
http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react ERROR [ 53%]
http_tests/message_tests/test_message_react.py::test_invalid_token ERROR [ 54%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message ERROR [ 54%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message ERROR [ 54%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message ERROR [ 55%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message ERROR [ 55%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message ERROR [ 55%]
http_tests/message_tests/test_message_remove.py::test_invalid_token ERROR [ 55%]
http_tests/message_tests/test_message_send.py::test_valid_message ERROR  [ 56%]
http_tests/message_tests/test_message_send.py::test_nonmember_post ERROR [ 56%]
http_tests/message_tests/test_message_send.py::test_invalid_channel SKIPPED [ 56%]
http_tests/message_tests/test_message_send.py::test_invalid_message ERROR [ 57%]
http_tests/message_tests/test_message_send.py::test_invalid_token ERROR  [ 57%]
http_tests/message_tests/test_message_senddm.py::test_valid_message ERROR [ 57%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post ERROR [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm SKIPPED [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message ERROR [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token ERROR [ 58%]
http_tests/message_tests/test_message_sendlater.py::test_valid_future_message ERROR [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater ERROR [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel ERROR [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_message_too_long ERROR [ 60%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_channel ERROR [ 60%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_token ERROR [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message ERROR [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater ERROR [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel ERROR [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long ERROR [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm ERROR [ 62%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token ERROR [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_channel ERROR [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_dm ERROR [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[True] ERROR [ 63%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[False] ERROR [ 63%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm ERROR [ 63%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel ERROR [ 64%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel SKIPPED [ 64%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm SKIPPED [ 64%]
http_tests/message_tests/test_message_share.py::test_invalid_og_message_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_invalid_message_length SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_channel_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_dm_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_invalid_token ERROR [ 66%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel ERROR [ 66%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm ERROR [ 66%]
http_tests/message_tests/test_message_unpin.py::test_invalid_message_id ERROR [ 67%]
http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice ERROR [ 67%]
http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin ERROR [ 67%]
http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin ERROR [ 67%]
http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin ERROR [ 68%]
http_tests/message_tests/test_message_unpin.py::test_invalid_token ERROR [ 68%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel ERROR [ 68%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message ERROR [ 69%]
http_tests/message_tests/test_message_unreact.py::test_invalid_message_id ERROR [ 69%]
http_tests/message_tests/test_message_unreact.py::test_invalid_react_id ERROR [ 69%]
http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice ERROR [ 69%]
http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact ERROR [ 70%]
http_tests/message_tests/test_message_unreact.py::test_invalid_token ERROR [ 70%]
http_tests/other_tests/test_clear.py::test_clear_works ERROR             [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification ERROR [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification ERROR [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification SKIPPED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification SKIPPED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_standup_finishing_triggers_notification SKIPPED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification ERROR [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification ERROR [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message] ERROR [ 73%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] ERROR [ 73%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch] ERROR [ 73%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm] ERROR [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification ERROR [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_addowner_triggers_notification SKIPPED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification ERROR [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification ERROR [ 75%]
http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched ERROR [ 75%]
http_tests/other_tests/test_notifications_get.py::test_invalid_token ERROR [ 75%]
http_tests/other_tests/test_search.py::test_no_matches ERROR             [ 76%]
http_tests/other_tests/test_search.py::test_single_match ERROR           [ 76%]
http_tests/other_tests/test_search.py::test_multiple_matches ERROR       [ 76%]
http_tests/other_tests/test_search.py::test_multiple_channels_joined ERROR [ 76%]
http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels ERROR [ 77%]
http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user ERROR [ 77%]
http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] ERROR [ 77%]
http_tests/other_tests/test_search.py::test_invalid_token ERROR          [ 78%]
http_tests/other_tests/test_users_all.py::test_successful_users_all ERROR [ 78%]
http_tests/other_tests/test_users_all.py::test_invalid_token ERROR       [ 78%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True] ERROR [ 79%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False] ERROR [ 79%]
http_tests/standup_tests/test_standup_active.py::test_active_standup ERROR [ 79%]
http_tests/standup_tests/test_standup_active.py::test_inactive_standup ERROR [ 79%]
http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id ERROR [ 80%]
http_tests/standup_tests/test_standup_active.py::test_invalid_token ERROR [ 80%]
http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly ERROR [ 80%]
http_tests/standup_tests/test_standup_send.py::test_return_format ERROR  [ 81%]
http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send ERROR [ 81%]
http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive ERROR [ 81%]
http_tests/standup_tests/test_standup_send.py::test_invalid_message_length ERROR [ 81%]
http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id ERROR [ 82%]
http_tests/standup_tests/test_standup_send.py::test_invalid_token ERROR  [ 82%]
http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format ERROR [ 82%]
http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse ERROR [ 83%]
http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel ERROR [ 83%]
http_tests/standup_tests/test_standup_start.py::test_creator_cannot_leave_during_startup SKIPPED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_standup_cannot_be_started_in_dm ERROR [ 83%]
http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup ERROR [ 84%]
http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active ERROR [ 84%]
http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id ERROR [ 84%]
http_tests/standup_tests/test_standup_start.py::test_invalid_token ERROR [ 85%]
http_tests/stats_tests/test_user_stats.py::test_return_type_correct ERROR [ 85%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create ERROR [ 85%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join ERROR [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite ERROR [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave ERROR [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner ERROR [ 86%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create ERROR [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite ERROR [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave ERROR [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove ERROR [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send ERROR [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater ERROR [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm ERROR [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater ERROR [ 89%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share ERROR [ 89%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish ERROR [ 89%]
http_tests/stats_tests/test_user_stats.py::test_involvement_tracked ERROR [ 90%]
http_tests/stats_tests/test_user_stats.py::test_invalid_token ERROR      [ 90%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid ERROR [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user ERROR      [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token ERROR     [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change ERROR [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email ERROR [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] ERROR [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] ERROR [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[a@mgail.com] ERROR [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] ERROR [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] ERROR [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] ERROR [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token ERROR [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change ERROR [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle ERROR [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] ERROR [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] ERROR [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] ERROR [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] ERROR [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token ERROR [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name ERROR [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] ERROR [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] ERROR [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-] ERROR [ 97%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] ERROR [ 97%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token ERROR [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct ERROR [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg ERROR [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0] ERROR [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0] ERROR [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0] ERROR [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000] ERROR [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url ERROR [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token ERROR [100%]

==================================== ERRORS ====================================
_______________ ERROR at setup of test_removal_can_do_no_action ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2947730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_removal_messages_correct_format ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2850ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_removal_profile_still_fetchable ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2850840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_removal_removed_from_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe289ac80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_removal_removed_from_dm ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe289a510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_not_in_users_all ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2885e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe281f730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe281ff28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_cannot_remove_user_nonowner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe28038c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2803c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_permission_change ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2813a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_changing_to_same_permission_idempotent _________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2813d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_nonowner_cant_change_permissions ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe28f7b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe28f7c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_permission ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2914d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe291e620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_successful_login ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe291eea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_can_have_two_sessions _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27ec840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_registered_but_incorrect_password ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27ecea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_successful_logout ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27d7950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_not_logged_in_logout __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27d7400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_registration ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27e0bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_return_format_correct _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2785488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_password_request_logs_out_everywhere __________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27999d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_channel_owner_can_addowner_when_member _________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2799f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_non_member_cannot_add_owner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27e06a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_member_cannot_add_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2798f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_cannot_addowner_prexisting_channel_owner ________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2749950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27497b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe274db70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe274dc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe275fd08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2703620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2703ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invite_global_owner __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2709840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe27091e0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_invitation_from_non_channel_member ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2723950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_channel_id_invalid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2723e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26bfa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26bff28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_global_owner_join_channel_public ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26c3c80>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_global_owner_join_channel_private ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26c3730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_global_member_join_public _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26e5d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_join_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe269e7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe269ef28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_member_leave_channel_successfully ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe267b8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe267bc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2698a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2698f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26b2bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26b26a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2641d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26546a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2654ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25f8840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_input_error_when_channel_id_invalid __________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25f8950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe26339d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_owner_can_remove_owner _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2633f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_global_owner_can_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25ffb70>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_nonmember_cannot_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25ff400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_member_cannot_remove_owner _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25b5d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25b5d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_cannot_remove_non_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25c5b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25c5bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25d0c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_create_channel[True-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25e9598>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_create_channel[False-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25e9ea0>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe257d730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe257df28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2586950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_when_in_no_channels __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25862f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_in_one_channel[True-andy] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25a2ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_in_one_channel[False-andy] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25a2378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_when_in_multiple_channels[False-True-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2536bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___ ERROR at setup of test_when_in_multiple_channels[False-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2536510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_when_in_multiple_channels[True-True-ZERG-andy] _____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe254fd90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_when_in_multiple_channels[True-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe255c6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_list_after_leave_channel ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe255cf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25028c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_when_no_channels ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe25029d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_one_channel_exists_private ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24ffa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_when_one_channel_exists_public _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24ff598>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_when_multiple_channels_exist ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2530bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2530950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_dm_creation _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24bad08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_dm_name_creation_single ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24e9620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_dm_name_creation_multiple _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24e9f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_dm_to_invalid_user ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24ca7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24ca8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe248a950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe248ae18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe248a9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2477e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe249ed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_invitation_from_non_dm_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe243b620>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_dm_id_invalid _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe243be18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe246e730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe246ef28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_member_leave_dm_successfully ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe244a950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe244a2f0>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe246aa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe246af28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_when_in_no_dms _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2427bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_when_in_one_dm _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe24279d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_when_in_multiple_dms __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2411d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_list_after_leave_dm __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe241e6a8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe241ef28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23c08c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23c09d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23cca60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23cc598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23e0bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23e0f28>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_input_error_when_dm_id_invalid _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2378d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23826a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_successful_dm_removal _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2382ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_removal_removes_messages ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe239f840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonowner_cannot_remove_dm _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe239f598>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe234a950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe234ae18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_original_poster_can_edit_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2343b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_owner_can_edit_members_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2343378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_global_owner_can_edit_members_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe234ed08>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_empty_edit_deletes_message _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe22f7598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_invalid_message_length _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe22f7ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_cannot_edit_deleted_message ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23037b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_nonowner_nonposter_cant_edit ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23038c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23148c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_message_ids_unique ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe23149d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_successful_pin_in_channel _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2323a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_successful_pin_in_dm __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2323f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe22c4c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_cannot_pin_twice ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe22c47b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_channel_member_cant_pin ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe22cfe18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_dm_member_cant_pin ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2275730>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_nonmember_cant_pin ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2275f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe227b840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_successful_react_in_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe227bb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_successful_react_to_dm_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2287a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2287e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_react_id ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe228cbf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_cant_react_twice ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe228c730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_nonmember_cannot_react _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2239d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2262620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_original_poster_can_remove_message ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2262f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_owner_can_remove_members_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2263840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_global_owner_can_remove_members_message ________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2263bf8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_cannot_remove_deleted_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21f99d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________ ERROR at setup of test_nonowner_nonposter_cant_remove_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21f9d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe220cae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe220ce18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2225c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21bb620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21bbe18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21d4730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21d4a60>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21d69d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21d6f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_valid_future_message __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2178a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonmeber_cannot_sendlater _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2178e18>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cannot_time_travel ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe217cc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_message_too_long ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe217ca60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_channel ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe219ee18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2147730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_valid_future_message __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2147f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonmeber_cannot_sendlater _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21748c8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cannot_time_travel ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2174f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_message_too_long ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe215aa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_invalid_dm _______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe215af28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20f8bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_successful_share_to_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20f8730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_share_to_dm _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2103d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_cross_share[True] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe21176a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_cross_share[False] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2117f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_cannot_share_to_unjoined_dm ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20b8840>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_cannot_share_to_unjoined_channel ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20b8b70>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20f2c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_successful_unpin_in_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20f28c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_unpin_in_dm _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20e4b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20e4950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cannot_unpin_twice ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20eed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_channel_member_cant_unpin _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20ab598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dm_member_cant_unpin __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20abea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_nonmember_cant_unpin __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe20997b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2099f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_successful_unreact_in_channel _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe209f950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_successful_unreact_to_dm_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe209f9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe203cae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_react_id ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe203c2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_cant_unreact_twice ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe205bc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_nonmember_cannot_unreact ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe205ba60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe204fe18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_clear_works ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ffb6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______ ERROR at setup of test_tag_thru_message_send_triggers_notification ______

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ffbf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____ ERROR at setup of test_tag_thru_message_senddm_triggers_notification _____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2028840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___ ERROR at setup of test_tag_thru_message_sendlater_triggers_notification ____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe202a2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__ ERROR at setup of test_tag_thru_message_sendlaterdm_triggers_notification ___

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe202a400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_tag_notification_message_preview_length[a small message] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe202af28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2024b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_react_triggers_notification[ch] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe2024bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_react_triggers_notification[dm] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1fc5d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_add_thru_ch_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1fca6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_add_thru_dm_create_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1fcaf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_add_thru_dm_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f7c840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_most_recent_20_notifications_fetched __________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f7c950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f859d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_no_matches _______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f85f28>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_single_match ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f84ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_multiple_matches ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f84e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_multiple_channels_joined ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1fa4d08>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_search_includes_only_joined_channels __________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f3d620>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____ ERROR at setup of test_search_matches_more_than_just_authorised_user _____

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f3dea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f56730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f56f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_successful_users_all __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f698c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f696a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_correct_return_format[True] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f00ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_correct_return_format[False] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f00e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_active_standup _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f0fc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_inactive_standup ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f19598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1f19e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ed46a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_messages_buffered_and_displayed_correctly _______

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ed4f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_return_format _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ece840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_non_member_cannot_standup_send _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1eceb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_send_when_standup_inactive _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ee59d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_invalid_message_length _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ee5ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e7cbf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e7c9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_standup_start_return_format ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e89d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_standup_restartable_after_lapse ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ea66a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_standup_affects_only_one_channel ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ea6f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_standup_cannot_be_started_in_dm ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e398c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_nonmember_cannot_start_standup _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e39f28>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______ ERROR at setup of test_cannot_start_standup_when_already_active ________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e489d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e48f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e5aae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_return_type_correct __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e5ae18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ ERROR at setup of test_channels_tracked_channels_create ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1df6d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_channels_tracked_channel_join _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e32598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_channels_tracked_channel_invite ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e32ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_channels_tracked_channel_leave _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e16730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_channels_tracked_channel_add_owner ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1e16a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_create _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1dbf950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_invite _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1dbf730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_leave __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1dd5ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_dms_tracked_dm_remove _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1dd5620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_messages_tracked_message_send _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1dcdbf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________ ERROR at setup of test_messages_tracked_message_sendlater ___________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1dcdf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_messages_tracked_message_senddm ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d75e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_messages_tracked_message_senddmlater __________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d83730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_messages_tracked_message_share _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d83f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_messages_tracked_standup_finish ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d978c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_involvement_tracked __________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d97620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1da89d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_user_profile_valid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1da8f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d40b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d40c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_successful_email_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d49d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_cannot_change_to_taken_email ______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d6c6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_email[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d6cf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_email[bob] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1cfd7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ ERROR at setup of test_invalid_email[a@mgail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1cfdae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_invalid_email[ab.com] _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d0f9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_invalid_email[@gmail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d0ff28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_email[ab@ab@gmail.com] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d1bb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1d1b400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________ ERROR at setup of test_successful_handle_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1cbed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________ ERROR at setup of test_cannot_change_to_taken_handle _____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1cce620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_handle[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1cceea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ ERROR at setup of test_invalid_handle[a] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1cdd730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ ERROR at setup of test_invalid_handle[aa] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1cddf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________ ERROR at setup of test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] _________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ca68c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ca69d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_user_profile_setname_valid_name ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c83ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ ERROR at setup of test_invalid_name[-] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c83e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ca1bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1ca17b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c3ad90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c46730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ ERROR at setup of test_return_format_correct _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c46f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ ERROR at setup of test_cannot_upload_non_jpeg _________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c4e8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[-1000-0-0-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c4ec80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[0--1000-0-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1bf5a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[0-0--1000-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1bf5f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ ERROR at setup of test_invalid_dimensions[0-0-0--1000] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c03bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ ERROR at setup of test_invalid_url ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c039d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7ffbe1c19d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:38: in make_user
    deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
=================================== FAILURES ===================================
______________ test_handle_generation_unique[Bob-Smith-bobsmith] _______________

name_first = 'Bob', name_last = 'Smith', expected_handle = 'bobsmith'
ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']

http_tests/auth_tests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] __

name_first = 'ababababab', name_last = 'cdcdcdcdcdcd'
expected_handle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']

http_tests/auth_tests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_handle_generation_duplicate _______________________

ctx = None

    def test_handle_generation_duplicate(ctx):
        auth_register('bob.jane@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
        session = auth_register('jane.bob@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']

http_tests/auth_tests/test_auth_register.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
=========================== short test summary info ============================
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[Bob-Smith-bobsmith]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_duplicate
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user - h...
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token - ...
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
ERROR http_tests/auth_tests/test_auth_login.py::test_successful_login - http_...
ERROR http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions - ...
ERROR http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password
ERROR http_tests/auth_tests/test_auth_logout.py::test_successful_logout - htt...
ERROR http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout - ...
ERROR http_tests/auth_tests/test_auth_register.py::test_successful_registration
ERROR http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
ERROR http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere
ERROR http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member
ERROR http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
ERROR http_tests/channel_tests/test_channel_details.py::test_member_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_token - ...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid - ht...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private
ERROR http_tests/channel_tests/test_channel_join.py::test_global_member_join_public
ERROR http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_join.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully
ERROR http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_token - ht...
ERROR http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel
ERROR http_tests/channels_tests/test_channels_list.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_no_channels
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist
ERROR http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
ERROR http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation - ht...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single - h...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_user - http_t...
ERROR http_tests/dm_tests/test_dm_create.py::test_invalid_token - http_tests....
ERROR http_tests/dm_tests/test_dm_details.py::test_member_successful - http_t...
ERROR http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id - http_tests...
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_token - http_tests...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invite_global_member - http...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member
ERROR http_tests/dm_tests/test_dm_invite.py::test_dm_id_invalid - http_tests....
ERROR http_tests/dm_tests/test_dm_invite.py::test_u_id_invalid - http_tests.e...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invalidated_token - http_te...
ERROR http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully
ERROR http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id - http_tests.e...
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_token - http_tests.e...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms - http_tests.e...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm - http_tests.e...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms - http_t...
ERROR http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm - http_te...
ERROR http_tests/dm_tests/test_dm_list.py::test_invalidated_token - http_test...
ERROR http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal - htt...
ERROR http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages - ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id - http_tests....
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_token - http_tests....
ERROR http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message
ERROR http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_message_length
ERROR http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message
ERROR http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_token - htt...
ERROR http_tests/message_tests/test_message_meta.py::test_message_ids_unique
ERROR http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel
ERROR http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm
ERROR http_tests/message_tests/test_message_pin.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice - h...
ERROR http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_invalid_token - http...
ERROR http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
ERROR http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
ERROR http_tests/message_tests/test_message_react.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_react.py::test_invalid_react_id
ERROR http_tests/message_tests/test_message_react.py::test_cant_react_twice
ERROR http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react
ERROR http_tests/message_tests/test_message_react.py::test_invalid_token - ht...
ERROR http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message
ERROR http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_invalid_token - h...
ERROR http_tests/message_tests/test_message_send.py::test_valid_message - htt...
ERROR http_tests/message_tests/test_message_send.py::test_nonmember_post - ht...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_message - h...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_token - htt...
ERROR http_tests/message_tests/test_message_senddm.py::test_valid_message - h...
ERROR http_tests/message_tests/test_message_senddm.py::test_nonmember_post - ...
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_message
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_token - h...
ERROR http_tests/message_tests/test_message_sendlater.py::test_valid_future_message
ERROR http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater
ERROR http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel
ERROR http_tests/message_tests/test_message_sendlater.py::test_message_too_long
ERROR http_tests/message_tests/test_message_sendlater.py::test_invalid_channel
ERROR http_tests/message_tests/test_message_sendlater.py::test_invalid_token
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel
ERROR http_tests/message_tests/test_message_share.py::test_invalid_token - ht...
ERROR http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel
ERROR http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm
ERROR http_tests/message_tests/test_message_unpin.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice
ERROR http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_invalid_token - ht...
ERROR http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel
ERROR http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_react_id
ERROR http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice
ERROR http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_token - ...
ERROR http_tests/other_tests/test_clear.py::test_clear_works - http_tests.err...
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message]
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
ERROR http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
ERROR http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
ERROR http_tests/other_tests/test_notifications_get.py::test_invalid_token - ...
ERROR http_tests/other_tests/test_search.py::test_no_matches - http_tests.err...
ERROR http_tests/other_tests/test_search.py::test_single_match - http_tests.e...
ERROR http_tests/other_tests/test_search.py::test_multiple_matches - http_tes...
ERROR http_tests/other_tests/test_search.py::test_multiple_channels_joined - ...
ERROR http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
ERROR http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
ERROR http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/other_tests/test_search.py::test_invalid_token - http_tests....
ERROR http_tests/other_tests/test_users_all.py::test_successful_users_all - h...
ERROR http_tests/other_tests/test_users_all.py::test_invalid_token - http_tes...
ERROR http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True]
ERROR http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False]
ERROR http_tests/standup_tests/test_standup_active.py::test_active_standup - ...
ERROR http_tests/standup_tests/test_standup_active.py::test_inactive_standup
ERROR http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_active.py::test_invalid_token - h...
ERROR http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly
ERROR http_tests/standup_tests/test_standup_send.py::test_return_format - htt...
ERROR http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send
ERROR http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_message_length
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_token - htt...
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_cannot_be_started_in_dm
ERROR http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup
ERROR http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active
ERROR http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_start.py::test_invalid_token - ht...
ERROR http_tests/stats_tests/test_user_stats.py::test_return_type_correct - h...
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave - ...
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish
ERROR http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - h...
ERROR http_tests/stats_tests/test_user_stats.py::test_invalid_token - http_te...
ERROR http_tests/user_tests/test_user_profile.py::test_user_profile_valid - h...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_user - http_te...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_token - http_t...
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[a@mgail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token
============ 3 failed, 30 passed, 22 skipped, 288 errors in 24.61s =============
